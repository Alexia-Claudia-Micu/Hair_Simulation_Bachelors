#pragma kernel CSMain

struct GPUVertex
{
    float3 position;
    float3 velocity;
    float angle;
};

struct StrandInfo
{
    int leaderStartIndex;
    int vertexCount;
    int followerStartIndex;
};

StructuredBuffer<GPUVertex> LeaderVertices;
StructuredBuffer<StrandInfo> StrandInfos;
RWStructuredBuffer<float3> FollowerPositions;

int followerCount;
float spawnRadius;
float taperAmount;
int strandCount;

[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint globalID = id.x;

    if (globalID >= (uint) (strandCount * followerCount))
        return;

    uint strandIndex = globalID / (uint)followerCount;
    uint followerIndex = globalID % followerCount;

    StrandInfo info = StrandInfos[strandIndex];
    uint leaderStart = info.leaderStartIndex;
    uint vertexCount = info.vertexCount;
    uint followerStart = info.followerStartIndex;

    float goldenAngle = 2.39996323; 
    float followerAngle = followerIndex * goldenAngle;
    float r = sqrt((float) (followerIndex + 1) / (float) (followerCount + 1));

    for (uint v = 0; v < vertexCount; ++v)
    {
        uint leaderIdx = leaderStart + v;
        uint outIdx = followerStart + followerIndex * vertexCount + v;

        float3 basePos = LeaderVertices[leaderIdx].position;

        float t = (float) v / max(1.0, (float) (vertexCount - 1));
        float taper = lerp(1.0, taperAmount, t);
        float radius = spawnRadius * taper;

        float3 offset = float3(cos(followerAngle), 0, sin(followerAngle)) * radius * r;

        FollowerPositions[outIdx] = basePos + offset;
    }
}
